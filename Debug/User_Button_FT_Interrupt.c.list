
User_Button_FT_Interrupt.c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000444  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000444  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d1  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001e3  00000000  00000000  00010e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00011080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020bf  00000000  00000000  000110c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000065f  00000000  00000000  0001317f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008aa3  00000000  00000000  000137de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001c281  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0001c2fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000424 	.word	0x08000424

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000424 	.word	0x08000424

080001e8 <delay>:
 */
#define ENABLE		1
#define RESET		0

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 500000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:


int main(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0



	//enable peripheral clock for GPIOD & GPIOA
	uint32_t *ptr = (uint32_t *)AHB1ENR;
 800021a:	4b3c      	ldr	r3, [pc, #240]	; (800030c <main+0xf8>)
 800021c:	60fb      	str	r3, [r7, #12]
	*ptr |= (1 << GPIOD);
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]
	*ptr |= (1 << GPIOA);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0201 	orr.w	r2, r3, #1
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]

	//init board LED4 for output mode
	ptr = (uint32_t *)GPIOD_MODER;
 8000236:	4b36      	ldr	r3, [pc, #216]	; (8000310 <main+0xfc>)
 8000238:	60fb      	str	r3, [r7, #12]
	*ptr |= (1 << 2 * GPIOD_PIN_NO);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	601a      	str	r2, [r3, #0]

	//set LED4 output type as push-pull
	ptr = (uint32_t *)GPIOD_OTYPER;
 8000246:	4b33      	ldr	r3, [pc, #204]	; (8000314 <main+0x100>)
 8000248:	60fb      	str	r3, [r7, #12]
	*ptr |= (0 << 2 * GPIOD_PIN_NO);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]

	//set LED4 speed as medium
	ptr = (uint32_t *)GPIOD_OSPEEDR;
 8000252:	4b31      	ldr	r3, [pc, #196]	; (8000318 <main+0x104>)
 8000254:	60fb      	str	r3, [r7, #12]
	*ptr |= (0 << 2 * GPIOD_PIN_NO);
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]

	//set LED4 speed as medium
	ptr = (uint32_t *)GPIOD_PUPDR;
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <main+0x108>)
 8000260:	60fb      	str	r3, [r7, #12]
	*ptr |= (0 << 2 * GPIOD_PIN_NO);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

	uint32_t *Outputptr = (uint32_t *)GPIOD_ODR;
 800026a:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <main+0x10c>)
 800026c:	60bb      	str	r3, [r7, #8]
	*Outputptr |= (0 << 24);
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]
	*Outputptr |= (0 << 25);
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	601a      	str	r2, [r3, #0]

	//set User Button0 speed as medium
	uint32_t *Btnptr = (uint32_t *)GPIOA_OSPEEDR;
 800027e:	4b29      	ldr	r3, [pc, #164]	; (8000324 <main+0x110>)
 8000280:	607b      	str	r3, [r7, #4]
	*Btnptr |= (0 << 2 * GPIOA_PIN_NO);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

	//no pull-up/pull-down needed for user button
	Btnptr = (uint32_t *)GPIOA_PUPDR;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <main+0x108>)
 800028c:	607b      	str	r3, [r7, #4]
	*Btnptr |= (0 << 2 * GPIOA_PIN_NO);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	601a      	str	r2, [r3, #0]

	//configure interrupt settings on peripheral side
	//enable falling edge interrupt on EXTI
	ptr = (uint32_t *)EXTI_FT;
 8000296:	4b24      	ldr	r3, [pc, #144]	; (8000328 <main+0x114>)
 8000298:	60fb      	str	r3, [r7, #12]
	*ptr |= (1 << GPIOA_PIN_NO);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0201 	orr.w	r2, r3, #1
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]

	//enable syscfg clock
	ptr = (uint32_t *)APB2ENR;
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <main+0x118>)
 80002a8:	60fb      	str	r3, [r7, #12]
	*ptr |= (1 << 14);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]

	//enable GPIOA pin 0 interrupts from EXTI0
	ptr = (uint32_t *)SYSCFG_EXTICR1;
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <main+0x11c>)
 80002b8:	60fb      	str	r3, [r7, #12]
	uint8_t portcode = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	70fb      	strb	r3, [r7, #3]
	*ptr |= (portcode << GPIOA_PIN_NO);
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	78fb      	ldrb	r3, [r7, #3]
 80002c4:	431a      	orrs	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]

	//enable interrupt delivery
	ptr = (uint32_t *)EXTI_IMR;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0x120>)
 80002cc:	60fb      	str	r3, [r7, #12]
	*ptr |= (1 << GPIOA_PIN_NO);
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0201 	orr.w	r2, r3, #1
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

	ptr = (uint32_t *)GPIOD_ODR;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <main+0x10c>)
 80002dc:	60fb      	str	r3, [r7, #12]
	*ptr |= ( 0 << GPIOD_PIN_NO);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]

	//configure interrupt settings on MCU side
	//enable IRQ 6 on NVIC which is connected to EXTI0
	*NVIC_ISER0 |= (1 << IRQ_NO_EXTI0);
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <main+0x124>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <main+0x124>)
 80002ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f0:	6013      	str	r3, [r2, #0]


	//set priortiy of IRQ number to 15
	*NVIC_IPR1 |= (15 <<  ((IRQ_NO_EXTI0 % 4) *8) +4 ) ;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <main+0x128>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a11      	ldr	r2, [pc, #68]	; (800033c <main+0x128>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	2300      	movs	r3, #0


}
 8000300:	4618      	mov	r0, r3
 8000302:	3714      	adds	r7, #20
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40023830 	.word	0x40023830
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40020c04 	.word	0x40020c04
 8000318:	40020c08 	.word	0x40020c08
 800031c:	4002000c 	.word	0x4002000c
 8000320:	40020c14 	.word	0x40020c14
 8000324:	40020008 	.word	0x40020008
 8000328:	40013c0c 	.word	0x40013c0c
 800032c:	40023844 	.word	0x40023844
 8000330:	40013808 	.word	0x40013808
 8000334:	40013c00 	.word	0x40013c00
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000e404 	.word	0xe000e404

08000340 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	uint32_t *ptr = (uint32_t *)EXTI_PR;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <EXTI0_IRQHandler+0x40>)
 8000348:	607b      	str	r3, [r7, #4]
	uint32_t *Optr = (uint32_t *)GPIOD_ODR;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <EXTI0_IRQHandler+0x44>)
 800034c:	603b      	str	r3, [r7, #0]
	delay();
 800034e:	f7ff ff4b 	bl	80001e8 <delay>

	//clear the exti pr register corresponding to the pin number
	if(*ptr & ( 1 << 0))
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d005      	beq.n	800036a <EXTI0_IRQHandler+0x2a>
	{
		//clear
		*ptr |= ( 1 << 0);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0201 	orr.w	r2, r3, #1
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
	}

	*Optr  ^= ( 1 << GPIOD_PIN_NO);
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f483 5280 	eor.w	r2, r3, #4096	; 0x1000
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	601a      	str	r2, [r3, #0]

}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40013c14 	.word	0x40013c14
 8000384:	40020c14 	.word	0x40020c14

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff2b 	bl	8000214 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4e0d      	ldr	r6, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1ba4      	subs	r4, r4, r6
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2500      	movs	r5, #0
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4e0b      	ldr	r6, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1ba4      	subs	r4, r4, r6
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2500      	movs	r5, #0
 80003fa:	42a5      	cmp	r5, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000404:	4798      	blx	r3
 8000406:	3501      	adds	r5, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800040e:	4798      	blx	r3
 8000410:	3501      	adds	r5, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
